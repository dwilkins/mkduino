#! /usr/bin/env ruby
#
# mkduino.rb
#   Ruby script for generating a GNU Automake (ish)
#   environment for Arduino development
#
# (C) Copyright 2013,2014
# David H. Wilkins  <dwilkins@conecuh.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

#
# get_updates -> backup files -> output -> save -> apply_updates
#




require "mkduino"
require 'optparse'

options = {}
default_options = {}
probed_options = {}
probe = Mkduino::Probe.new

OptionParser.new do |opts|
  default_options[:verbose] = false
  default_options[:git] = false
  default_options[:update] = false
  default_options[:overwrite] = false
  default_options[:mcu] = "atmega328p"
  default_options[:num_args] = ARGV.length
  default_options[:autoconfigure] = false
  default_options[:device] = "/dev/ttyUSB0"
  default_options[:variant] = "standard"
  default_options[:clock_speed] = "16000000"
  default_options[:baud_rate] = "57600"
  default_options[:programmer] = "arduino"
  opts.banner = "Usage: #{opts.program_name} [options]"
  opts.on("-p","--[no-]probe","Probe for stuff") do |v|
    probe.probe
    probed_options.merge! probe.options
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
#  opts.on("-g","--[no-]git","Create / update git repo") do |v|
#    options[:git] = v
#  end
#  opts.on("-u","--[no-]update","Update current project files") do |v|
#    options[:update] = v
#  end
  opts.on('-a',"--[no-]autoconfigure","automatically run autogen.sh and configure") do |v|
    options[:autoconfigure] = v
  end

  opts.on("-b","--board BOARD",Mkduino::Probe::BOARDS.keys,"Arduino Board Type", "#{Mkduino::Probe::BOARDS.keys.join(',')}") do |v|
    options.merge! Mkduino::Probe::BOARDS[v]
  end

  opts.on("--programmer PROGRAMMER",["arduino","stk500"],"AVRDUDE Programmer type", "arduino, stk500") do |v|
    options[:programmer] = v
  end


  opts.on("-o","--[no-]overwrite","Overwrite current project files") do |v|
    options[:overwrite] = v
  end

  opts.on("-c","--clock SPEED",Integer,"Clock speed") do |v|
    options[:clock_speed] = v
  end

  opts.on("-t","--type TYPE",["mega","standard"],"Arduino library type (aka variant)") do |v|
    options[:variant] = v
  end

  opts.on("-d","--device DEVICE","Arduino programming device.","Example: /dev/ttyUSB0.") do |v|
    options[:device] = v
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  if( default_options[:num_args] < 1)
    puts opts
    exit
  end
end.parse!


default_options.merge!( probed_options.merge!( options ) )


if !options[:overwrite] && Mkduino::GENERATED_FILES.collect do |gf|
    Pathname.new("Makefile.am").exist? ? true : nil
  end.compact.any?
  puts "Please supply --overwrite to ovewrite existing files"
  exit
end



ma = Mkduino::MakefileAm.new "Makefile.am", options
ma.find_arduino_libraries '/usr/share/arduino/libraries'
ma.find_arduino_libraries '/usr/share/arduino/hardware/arduino/cores'
ma.find_source_files
ca = Mkduino::ConfigureAc.new ma
as = Mkduino::AutogenSh.new "autogen.sh"
if options[:verbose]
  puts ma.to_yaml
end

##
# Output the Makefile.am file withe the needed variable replacements
##
ma.write_makefile_am
##
# Output the configure.ac - requires a few things from Makefile.am
##
ca.write_configure_ac
##
# Finally write the autogen.sh - no replacements there
##
as.write_autogen_sh

#
# A few shell commands required to make it all tidy
#
`mkdir m4` unless Dir.exist?('m4')
`mkdir config` unless Dir.exist?('config')
`touch config/config.h`
`touch NEWS`
`touch README`
`touch AUTHORS`
`touch ChangeLog`

if options[:autoconfigure]
  `./autogen.sh`
  unless Dir.exist?('build')
    Dir.mkdir('build')
  end
  Dir.chdir("build")
  `../configure --host=avr`
  `make hex`
  puts "*******************************"
  puts "** now run cd build ; make   **"
  puts "*******************************"
else
  puts "*******************************"
  puts "** now run ./autogen.sh      **"
  puts "*******************************"
end
