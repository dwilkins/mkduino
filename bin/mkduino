#! /usr/bin/env ruby
#
# mkduino.rb
#   Ruby script for generating a GNU Automake (ish)
#   environment for Arduino development
#
# (C) Copyright 2013,2014
# David H. Wilkins  <dwilkins@conecuh.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

require "mkduino"
require 'optparse'

options = {}
OptionParser.new do |opts|
  options[:verbose] = false
  options[:git] = false
  options[:update] = false
  options[:overwrite] = false
  options[:num_args] = ARGV.length

  opts.banner = "Usage: #{opts.program_name} [options]"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
#  opts.on("-g","--[no-]git","Create / update git repo") do |v|
#    options[:git] = v
#  end
#  opts.on("-u","--[no-]update","Update current project files") do |v|
#    options[:update] = v
#  end
  opts.on("-o","--[no-]overwrite","Overwrite current project files") do |v|
    options[:overwrite] = v
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  if options[:num_args] < 1
    puts opts
    exit
  end

end.parse!

if((Pathname.new("Makefile.am").exist? ||
    Pathname.new("configure.ac").exist? ||
    Pathname.new("autogen.sh").exist? ||
    Pathname.new("config/config.h").exist? ||
    Pathname.new("NEWS").exist? ||
    Pathname.new("README").exist? ||
    Pathname.new("AUTHORS").exist? ||
    Pathname.new("ChangeLog").exist?) && !options[:overwrite])
  puts "Please supply --overwrite to ovewrite existing files"
  exit
end



ma = Mkduino::MakefileAm.new
ma.find_arduino_libraries '/usr/share/arduino/libraries'
ma.find_arduino_libraries '/usr/share/arduino/hardware/arduino/cores'
ma.find_source_files
ca = Mkduino::ConfigureAc.new ma
as = Mkduino::AutogenSh.new
if options[:verbose]
  puts ma.to_yaml
end

##
# Output the Makefile.am file withe the needed variable replacements
##
ma.write_makefile_am
##
# Output the configure.ac - requires a few things from Makefile.am
##
ca.write_configure_ac
##
# Finally write the autogen.sh - no replacements there
##
as.write_autogen_sh

#
# A few shell commands required to make it all tidy
#
`chmod +x autogen.sh`
`mkdir m4` unless Dir.exist?('m4')
`mkdir config` unless Dir.exist?('config')
`touch config/config.h`
`touch NEWS`
`touch README`
`touch AUTHORS`
`touch ChangeLog`

puts "*******************************"
puts "** now run ./autogen.sh      **"
puts "*******************************"
